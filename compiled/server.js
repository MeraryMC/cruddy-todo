
// Todo Model //////////////////////////////////////////////////////////////////

const Todo = require('./datastore');

// Configure Express ///////////////////////////////////////////////////////////

const bodyParser = require('body-parser');
const express = require('express');
const morgan = require('morgan');
const path = require('path');

const app = express();
app.use(morgan('dev'));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(express.static(path.join(__dirname, './compiled/public')));
app.use(express.static(path.join(__dirname, './public')));
app.use(express.static(path.join(__dirname, './node_modules')));

// RESTful Routes for CRUD operations //////////////////////////////////////////

// Create (Crud) -- collection route
app.post('/todo', (req, res) => {
  Todo.create(req.body.todoText, (err, newTodo) => {
    if (err) {
      res.sendStatus(400);
    } else {
      res.status(201).json(newTodo);
    }
  });
});

// Read all (cRud) -- collection route
app.get('/todo', (req, res) => {
  Todo.readAll((err, todos) => {
    if (err) {
      res.sendStatus(400);
    } else {
      res.status(200).json(todos);
    }
  });
});

// Read one (cRud) -- member route
app.get('/todo/:id', (req, res) => {
  Todo.readOne(req.params.id, (err, todo) => {
    if (todo) {
      res.status(200).json(todo);
    } else {
      res.sendStatus(404);
    }
  });
});

// Update (crUd) -- member route
app.put('/todo/:id', (req, res) => {
  Todo.update(req.params.id, req.body.todoText, (err, todo) => {
    if (todo) {
      res.status(200).json(todo);
    } else {
      res.sendStatus(404);
    }
  });
});

// Delete (cruD) -- member route
app.delete('/todo/:id', (req, res) => {
  Todo.delete(req.params.id, err => {
    if (err) {
      res.sendStatus(404);
    } else {
      res.sendStatus(204);
    }
  });
});

// Start & Initialize Web Server ///////////////////////////////////////////////

const port = 3000;
app.listen(port, () => {
  console.log('CRUDdy Todo server is running in the terminal');
  console.log(`To get started, visit: http://localhost:${port}`);
});

Todo.initialize();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NlcnZlci5qcyJdLCJuYW1lcyI6WyJUb2RvIiwicmVxdWlyZSIsImJvZHlQYXJzZXIiLCJleHByZXNzIiwibW9yZ2FuIiwicGF0aCIsImFwcCIsInVzZSIsImpzb24iLCJ1cmxlbmNvZGVkIiwiZXh0ZW5kZWQiLCJzdGF0aWMiLCJqb2luIiwiX19kaXJuYW1lIiwicG9zdCIsInJlcSIsInJlcyIsImNyZWF0ZSIsImJvZHkiLCJ0b2RvVGV4dCIsImVyciIsIm5ld1RvZG8iLCJzZW5kU3RhdHVzIiwic3RhdHVzIiwiZ2V0IiwicmVhZEFsbCIsInRvZG9zIiwicmVhZE9uZSIsInBhcmFtcyIsImlkIiwidG9kbyIsInB1dCIsInVwZGF0ZSIsImRlbGV0ZSIsInBvcnQiLCJsaXN0ZW4iLCJjb25zb2xlIiwibG9nIiwiaW5pdGlhbGl6ZSJdLCJtYXBwaW5ncyI6IjtBQUNBOztBQUVBLE1BQU1BLE9BQU9DLFFBQVEsYUFBUixDQUFiOztBQUVBOztBQUVBLE1BQU1DLGFBQWFELFFBQVEsYUFBUixDQUFuQjtBQUNBLE1BQU1FLFVBQVVGLFFBQVEsU0FBUixDQUFoQjtBQUNBLE1BQU1HLFNBQVNILFFBQVEsUUFBUixDQUFmO0FBQ0EsTUFBTUksT0FBT0osUUFBUSxNQUFSLENBQWI7O0FBRUEsTUFBTUssTUFBTUgsU0FBWjtBQUNBRyxJQUFJQyxHQUFKLENBQVFILE9BQU8sS0FBUCxDQUFSO0FBQ0FFLElBQUlDLEdBQUosQ0FBUUwsV0FBV00sSUFBWCxFQUFSO0FBQ0FGLElBQUlDLEdBQUosQ0FBUUwsV0FBV08sVUFBWCxDQUFzQixFQUFDQyxVQUFVLEtBQVgsRUFBdEIsQ0FBUjtBQUNBSixJQUFJQyxHQUFKLENBQVFKLFFBQVFRLE1BQVIsQ0FBZU4sS0FBS08sSUFBTCxDQUFVQyxTQUFWLEVBQXFCLG1CQUFyQixDQUFmLENBQVI7QUFDQVAsSUFBSUMsR0FBSixDQUFRSixRQUFRUSxNQUFSLENBQWVOLEtBQUtPLElBQUwsQ0FBVUMsU0FBVixFQUFxQixVQUFyQixDQUFmLENBQVI7QUFDQVAsSUFBSUMsR0FBSixDQUFRSixRQUFRUSxNQUFSLENBQWVOLEtBQUtPLElBQUwsQ0FBVUMsU0FBVixFQUFxQixnQkFBckIsQ0FBZixDQUFSOztBQUVBOztBQUVBO0FBQ0FQLElBQUlRLElBQUosQ0FBUyxPQUFULEVBQWtCLENBQUNDLEdBQUQsRUFBTUMsR0FBTixLQUFjO0FBQzlCaEIsT0FBS2lCLE1BQUwsQ0FBWUYsSUFBSUcsSUFBSixDQUFTQyxRQUFyQixFQUErQixDQUFDQyxHQUFELEVBQU1DLE9BQU4sS0FBa0I7QUFDL0MsUUFBSUQsR0FBSixFQUFTO0FBQ1BKLFVBQUlNLFVBQUosQ0FBZSxHQUFmO0FBQ0QsS0FGRCxNQUVPO0FBQ0xOLFVBQUlPLE1BQUosQ0FBVyxHQUFYLEVBQWdCZixJQUFoQixDQUFxQmEsT0FBckI7QUFDRDtBQUNGLEdBTkQ7QUFPRCxDQVJEOztBQVVBO0FBQ0FmLElBQUlrQixHQUFKLENBQVEsT0FBUixFQUFpQixDQUFDVCxHQUFELEVBQU1DLEdBQU4sS0FBYztBQUM3QmhCLE9BQUt5QixPQUFMLENBQWEsQ0FBQ0wsR0FBRCxFQUFNTSxLQUFOLEtBQWdCO0FBQzNCLFFBQUlOLEdBQUosRUFBUztBQUNQSixVQUFJTSxVQUFKLENBQWUsR0FBZjtBQUNELEtBRkQsTUFFTztBQUNMTixVQUFJTyxNQUFKLENBQVcsR0FBWCxFQUFnQmYsSUFBaEIsQ0FBcUJrQixLQUFyQjtBQUNEO0FBQ0YsR0FORDtBQU9ELENBUkQ7O0FBVUE7QUFDQXBCLElBQUlrQixHQUFKLENBQVEsV0FBUixFQUFxQixDQUFDVCxHQUFELEVBQU1DLEdBQU4sS0FBYztBQUNqQ2hCLE9BQUsyQixPQUFMLENBQWFaLElBQUlhLE1BQUosQ0FBV0MsRUFBeEIsRUFBNEIsQ0FBQ1QsR0FBRCxFQUFNVSxJQUFOLEtBQWU7QUFDekMsUUFBSUEsSUFBSixFQUFVO0FBQ1JkLFVBQUlPLE1BQUosQ0FBVyxHQUFYLEVBQWdCZixJQUFoQixDQUFxQnNCLElBQXJCO0FBQ0QsS0FGRCxNQUVPO0FBQ0xkLFVBQUlNLFVBQUosQ0FBZSxHQUFmO0FBQ0Q7QUFDRixHQU5EO0FBT0QsQ0FSRDs7QUFVQTtBQUNBaEIsSUFBSXlCLEdBQUosQ0FBUSxXQUFSLEVBQXFCLENBQUNoQixHQUFELEVBQU1DLEdBQU4sS0FBYztBQUNqQ2hCLE9BQUtnQyxNQUFMLENBQVlqQixJQUFJYSxNQUFKLENBQVdDLEVBQXZCLEVBQTJCZCxJQUFJRyxJQUFKLENBQVNDLFFBQXBDLEVBQThDLENBQUNDLEdBQUQsRUFBTVUsSUFBTixLQUFlO0FBQzNELFFBQUlBLElBQUosRUFBVTtBQUNSZCxVQUFJTyxNQUFKLENBQVcsR0FBWCxFQUFnQmYsSUFBaEIsQ0FBcUJzQixJQUFyQjtBQUNELEtBRkQsTUFFTztBQUNMZCxVQUFJTSxVQUFKLENBQWUsR0FBZjtBQUNEO0FBQ0YsR0FORDtBQU9ELENBUkQ7O0FBVUE7QUFDQWhCLElBQUkyQixNQUFKLENBQVcsV0FBWCxFQUF3QixDQUFDbEIsR0FBRCxFQUFNQyxHQUFOLEtBQWM7QUFDcENoQixPQUFLaUMsTUFBTCxDQUFZbEIsSUFBSWEsTUFBSixDQUFXQyxFQUF2QixFQUE0QlQsR0FBRCxJQUFTO0FBQ2xDLFFBQUlBLEdBQUosRUFBUztBQUNQSixVQUFJTSxVQUFKLENBQWUsR0FBZjtBQUNELEtBRkQsTUFFTztBQUNMTixVQUFJTSxVQUFKLENBQWUsR0FBZjtBQUNEO0FBQ0YsR0FORDtBQU9ELENBUkQ7O0FBVUE7O0FBRUEsTUFBTVksT0FBTyxJQUFiO0FBQ0E1QixJQUFJNkIsTUFBSixDQUFXRCxJQUFYLEVBQWlCLE1BQU07QUFDckJFLFVBQVFDLEdBQVIsQ0FBWSwrQ0FBWjtBQUNBRCxVQUFRQyxHQUFSLENBQWEsMkNBQTBDSCxJQUFLLEVBQTVEO0FBQ0QsQ0FIRDs7QUFLQWxDLEtBQUtzQyxVQUFMIiwiZmlsZSI6InNlcnZlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLy8gVG9kbyBNb2RlbCAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuY29uc3QgVG9kbyA9IHJlcXVpcmUoJy4vZGF0YXN0b3JlJyk7XG5cbi8vIENvbmZpZ3VyZSBFeHByZXNzIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbmNvbnN0IGJvZHlQYXJzZXIgPSByZXF1aXJlKCdib2R5LXBhcnNlcicpO1xuY29uc3QgZXhwcmVzcyA9IHJlcXVpcmUoJ2V4cHJlc3MnKTtcbmNvbnN0IG1vcmdhbiA9IHJlcXVpcmUoJ21vcmdhbicpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcblxuY29uc3QgYXBwID0gZXhwcmVzcygpO1xuYXBwLnVzZShtb3JnYW4oJ2RldicpKTtcbmFwcC51c2UoYm9keVBhcnNlci5qc29uKCkpO1xuYXBwLnVzZShib2R5UGFyc2VyLnVybGVuY29kZWQoe2V4dGVuZGVkOiBmYWxzZX0pKTtcbmFwcC51c2UoZXhwcmVzcy5zdGF0aWMocGF0aC5qb2luKF9fZGlybmFtZSwgJy4vY29tcGlsZWQvcHVibGljJykpKTtcbmFwcC51c2UoZXhwcmVzcy5zdGF0aWMocGF0aC5qb2luKF9fZGlybmFtZSwgJy4vcHVibGljJykpKTtcbmFwcC51c2UoZXhwcmVzcy5zdGF0aWMocGF0aC5qb2luKF9fZGlybmFtZSwgJy4vbm9kZV9tb2R1bGVzJykpKTtcblxuLy8gUkVTVGZ1bCBSb3V0ZXMgZm9yIENSVUQgb3BlcmF0aW9ucyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLy8gQ3JlYXRlIChDcnVkKSAtLSBjb2xsZWN0aW9uIHJvdXRlXG5hcHAucG9zdCgnL3RvZG8nLCAocmVxLCByZXMpID0+IHtcbiAgVG9kby5jcmVhdGUocmVxLmJvZHkudG9kb1RleHQsIChlcnIsIG5ld1RvZG8pID0+IHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICByZXMuc2VuZFN0YXR1cyg0MDApO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXMuc3RhdHVzKDIwMSkuanNvbihuZXdUb2RvKTtcbiAgICB9XG4gIH0pO1xufSk7XG5cbi8vIFJlYWQgYWxsIChjUnVkKSAtLSBjb2xsZWN0aW9uIHJvdXRlXG5hcHAuZ2V0KCcvdG9kbycsIChyZXEsIHJlcykgPT4ge1xuICBUb2RvLnJlYWRBbGwoKGVyciwgdG9kb3MpID0+IHtcbiAgICBpZiAoZXJyKSB7XG4gICAgICByZXMuc2VuZFN0YXR1cyg0MDApO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXMuc3RhdHVzKDIwMCkuanNvbih0b2Rvcyk7XG4gICAgfVxuICB9KTtcbn0pO1xuXG4vLyBSZWFkIG9uZSAoY1J1ZCkgLS0gbWVtYmVyIHJvdXRlXG5hcHAuZ2V0KCcvdG9kby86aWQnLCAocmVxLCByZXMpID0+IHtcbiAgVG9kby5yZWFkT25lKHJlcS5wYXJhbXMuaWQsIChlcnIsIHRvZG8pID0+IHtcbiAgICBpZiAodG9kbykge1xuICAgICAgcmVzLnN0YXR1cygyMDApLmpzb24odG9kbyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcy5zZW5kU3RhdHVzKDQwNCk7XG4gICAgfVxuICB9KTtcbn0pO1xuXG4vLyBVcGRhdGUgKGNyVWQpIC0tIG1lbWJlciByb3V0ZVxuYXBwLnB1dCgnL3RvZG8vOmlkJywgKHJlcSwgcmVzKSA9PiB7XG4gIFRvZG8udXBkYXRlKHJlcS5wYXJhbXMuaWQsIHJlcS5ib2R5LnRvZG9UZXh0LCAoZXJyLCB0b2RvKSA9PiB7XG4gICAgaWYgKHRvZG8pIHtcbiAgICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHRvZG8pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXMuc2VuZFN0YXR1cyg0MDQpO1xuICAgIH1cbiAgfSk7XG59KTtcblxuLy8gRGVsZXRlIChjcnVEKSAtLSBtZW1iZXIgcm91dGVcbmFwcC5kZWxldGUoJy90b2RvLzppZCcsIChyZXEsIHJlcykgPT4ge1xuICBUb2RvLmRlbGV0ZShyZXEucGFyYW1zLmlkLCAoZXJyKSA9PiB7XG4gICAgaWYgKGVycikge1xuICAgICAgcmVzLnNlbmRTdGF0dXMoNDA0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzLnNlbmRTdGF0dXMoMjA0KTtcbiAgICB9XG4gIH0pO1xufSk7XG5cbi8vIFN0YXJ0ICYgSW5pdGlhbGl6ZSBXZWIgU2VydmVyIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbmNvbnN0IHBvcnQgPSAzMDAwO1xuYXBwLmxpc3Rlbihwb3J0LCAoKSA9PiB7XG4gIGNvbnNvbGUubG9nKCdDUlVEZHkgVG9kbyBzZXJ2ZXIgaXMgcnVubmluZyBpbiB0aGUgdGVybWluYWwnKTtcbiAgY29uc29sZS5sb2coYFRvIGdldCBzdGFydGVkLCB2aXNpdDogaHR0cDovL2xvY2FsaG9zdDoke3BvcnR9YCk7XG59KTtcblxuVG9kby5pbml0aWFsaXplKCk7XG4iXX0=