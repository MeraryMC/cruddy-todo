const fs = require('fs');
const path = require('path');
const _ = require('underscore');
const counter = require('./counter');
const Promise = require('bluebird');

var items = {};

// Public API - Fix these CRUD functions ///////////////////////////////////////

exports.create = (text, callback) => {
  counter.getNextUniqueId((err, counterString) => {

    if (err) {
      callback(err);
    } else {
      var path = exports.dataDir + '/' + counterString + '.txt';
      var id = counterString;
      fs.writeFile(path, text, err => {
        if (err) {
          console.log('There was a problem writing to file');
          callback(err);
        } else {
          callback(null, { id, text });
        }
      });
    }
  });
};

exports.readAll = callback => {
  var readOneAsync = Promise.promisify(exports.readOne);
  fs.readdir(exports.dataDir, (err, files) => {
    if (err) {
      callback(err);
    } else {
      var promises = files.map(fileName => {
        var id = fileName.split('.')[0];
        return readOneAsync(id).then(todo => todo);
      });

      Promise.all(promises).then(result => {
        callback(null, result);
      });
      // var result = _.map(files, (fileName) => {
      //   var id = fileName.split('.')[0];
      //   var text = id;
      //   return {id, text};
      // });
      // return result;
    }
  });
};

exports.readOne = (id, callback) => {
  var path = exports.dataDir + '/' + id + '.txt';
  fs.readFile(path, (err, data) => {
    if (err) {
      callback(new Error(`No item with id: ${id}`));
    } else {
      text = data.toString();
      callback(null, { id, text });
    }
  });
};

exports.update = (id, text, callback) => {
  var path = exports.dataDir + '/' + id + '.txt';
  fs.access(path, err => {
    if (err) {
      callback(err);
    } else {
      fs.writeFile(path, text, err => {
        if (err) {
          callback(new Error(`No item with id: ${id}`));
        } else {
          callback(null, { id, text });
        }
      });
    }
  });
};

exports.delete = (id, callback) => {
  var path = exports.dataDir + '/' + id + '.txt';
  fs.unlink(path, err => callback(err));
};

// Config+Initialization code -- DO NOT MODIFY /////////////////////////////////

exports.dataDir = path.join(__dirname, 'data');

exports.initialize = () => {
  if (!fs.existsSync(exports.dataDir)) {
    fs.mkdirSync(exports.dataDir);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2RhdGFzdG9yZS9pbmRleC5qcyJdLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJwYXRoIiwiXyIsImNvdW50ZXIiLCJQcm9taXNlIiwiaXRlbXMiLCJleHBvcnRzIiwiY3JlYXRlIiwidGV4dCIsImNhbGxiYWNrIiwiZ2V0TmV4dFVuaXF1ZUlkIiwiZXJyIiwiY291bnRlclN0cmluZyIsImRhdGFEaXIiLCJpZCIsIndyaXRlRmlsZSIsImNvbnNvbGUiLCJsb2ciLCJyZWFkQWxsIiwicmVhZE9uZUFzeW5jIiwicHJvbWlzaWZ5IiwicmVhZE9uZSIsInJlYWRkaXIiLCJmaWxlcyIsInByb21pc2VzIiwibWFwIiwiZmlsZU5hbWUiLCJzcGxpdCIsInRoZW4iLCJ0b2RvIiwiYWxsIiwicmVzdWx0IiwicmVhZEZpbGUiLCJkYXRhIiwiRXJyb3IiLCJ0b1N0cmluZyIsInVwZGF0ZSIsImFjY2VzcyIsImRlbGV0ZSIsInVubGluayIsImpvaW4iLCJfX2Rpcm5hbWUiLCJpbml0aWFsaXplIiwiZXhpc3RzU3luYyIsIm1rZGlyU3luYyJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsS0FBS0MsUUFBUSxJQUFSLENBQVg7QUFDQSxNQUFNQyxPQUFPRCxRQUFRLE1BQVIsQ0FBYjtBQUNBLE1BQU1FLElBQUlGLFFBQVEsWUFBUixDQUFWO0FBQ0EsTUFBTUcsVUFBVUgsUUFBUSxXQUFSLENBQWhCO0FBQ0EsTUFBTUksVUFBVUosUUFBUyxVQUFULENBQWhCOztBQUVBLElBQUlLLFFBQVEsRUFBWjs7QUFFQTs7QUFFQUMsUUFBUUMsTUFBUixHQUFpQixDQUFDQyxJQUFELEVBQU9DLFFBQVAsS0FBb0I7QUFDbkNOLFVBQVFPLGVBQVIsQ0FBd0IsQ0FBQ0MsR0FBRCxFQUFNQyxhQUFOLEtBQXdCOztBQUU5QyxRQUFJRCxHQUFKLEVBQVM7QUFDUEYsZUFBU0UsR0FBVDtBQUNELEtBRkQsTUFFTztBQUNMLFVBQUlWLE9BQU9LLFFBQVFPLE9BQVIsR0FBa0IsR0FBbEIsR0FB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O0FBQ0FmLEtBQUd3QyxNQUFILENBQVV0QyxJQUFWLEVBQWlCVSxHQUFELElBQVNGLFNBQVNFLEdBQVQsQ0FBekI7QUFDRCxDQUhEOztBQUtBOztBQUVBTCxRQUFRTyxPQUFSLEdBQWtCWixLQUFLdUMsSUFBTCxDQUFVQyxTQUFWLEVBQXFCLE1BQXJCLENBQWxCOztBQUVBbkMsUUFBUW9DLFVBQVIsR0FBcUIsTUFBTTtBQUN6QixNQUFJLENBQUMzQyxHQUFHNEMsVUFBSCxDQUFjckMsUUFBUU8sT0FBdEIsQ0FBTCxFQUFxQztBQUNuQ2QsT0FBRzZDLFNBQUgsQ0FBYXRDLFFBQVFPLE9BQXJCO0FBQ0Q7QUFDRixDQUpEIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IF8gPSByZXF1aXJlKCd1bmRlcnNjb3JlJyk7XG5jb25zdCBjb3VudGVyID0gcmVxdWlyZSgnLi9jb3VudGVyJyk7XG5jb25zdCBQcm9taXNlID0gcmVxdWlyZSAoJ2JsdWViaXJkJyk7XG5cbnZhciBpdGVtcyA9IHt9O1xuXG4vLyBQdWJsaWMgQVBJIC0gRml4IHRoZXNlIENSVUQgZnVuY3Rpb25zIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5leHBvcnRzLmNyZWF0ZSA9ICh0ZXh0LCBjYWxsYmFjaykgPT4ge1xuICBjb3VudGVyLmdldE5leHRVbmlxdWVJZCgoZXJyLCBjb3VudGVyU3RyaW5nKSA9PiB7XG5cbiAgICBpZiAoZXJyKSB7XG4gICAgICBjYWxsYmFjayhlcnIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcGF0aCA9IGV4cG9ydHMuZGF0YURpciArICcvJyArIGNvdW50ZXJTdHJpbmcgKyAnLnR4dCc7XG4gICAgICB2YXIgaWQgPSBjb3VudGVyU3RyaW5nO1xuICAgICAgZnMud3JpdGVGaWxlKHBhdGgsIHRleHQsIChlcnIpID0+IHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIGNvbnNvbGUubG9nKCdUaGVyZSB3YXMgYSBwcm9ibGVtIHdyaXRpbmcgdG8gZmlsZScpO1xuICAgICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FsbGJhY2sobnVsbCwge2lkLCB0ZXh0fSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG59O1xuXG5leHBvcnRzLnJlYWRBbGwgPSAoY2FsbGJhY2spID0+IHtcbiAgdmFyIHJlYWRPbmVBc3luYyA9IFByb21pc2UucHJvbWlzaWZ5KGV4cG9ydHMucmVhZE9uZSk7XG4gIGZzLnJlYWRkaXIoZXhwb3J0cy5kYXRhRGlyLCAoZXJyLCBmaWxlcykgPT4ge1xuICAgIGlmIChlcnIpIHtcbiAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwcm9taXNlcyA9IGZpbGVzLm1hcCgoZmlsZU5hbWUpID0+IHtcbiAgICAgICAgdmFyIGlkID0gZmlsZU5hbWUuc3BsaXQoJy4nKVswXTtcbiAgICAgICAgcmV0dXJuIHJlYWRPbmVBc3luYyhpZClcbiAgICAgICAgICAudGhlbigodG9kbykgPT4gdG9kbyk7XG4gICAgICB9KTtcblxuICAgICAgUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICBjYWxsYmFjayhudWxsLCByZXN1bHQpO1xuICAgICAgfSk7XG4gICAgICAvLyB2YXIgcmVzdWx0ID0gXy5tYXAoZmlsZXMsIChmaWxlTmFtZSkgPT4ge1xuICAgICAgLy8gICB2YXIgaWQgPSBmaWxlTmFtZS5zcGxpdCgnLicpWzBdO1xuICAgICAgLy8gICB2YXIgdGV4dCA9IGlkO1xuICAgICAgLy8gICByZXR1cm4ge2lkLCB0ZXh0fTtcbiAgICAgIC8vIH0pO1xuICAgICAgLy8gcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIH0pO1xufTtcblxuZXhwb3J0cy5yZWFkT25lID0gKGlkLCBjYWxsYmFjaykgPT4ge1xuICB2YXIgcGF0aCA9IGV4cG9ydHMuZGF0YURpciArICcvJyArIGlkICsgJy50eHQnO1xuICBmcy5yZWFkRmlsZShwYXRoLCAoZXJyLCBkYXRhKSA9PiB7XG4gICAgaWYgKGVycikge1xuICAgICAgY2FsbGJhY2sobmV3IEVycm9yKGBObyBpdGVtIHdpdGggaWQ6ICR7aWR9YCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0ZXh0ID0gZGF0YS50b1N0cmluZygpO1xuICAgICAgY2FsbGJhY2sobnVsbCwgeyBpZCwgdGV4dCB9KTtcbiAgICB9XG4gIH0pO1xufTtcblxuZXhwb3J0cy51cGRhdGUgPSAoaWQsIHRleHQsIGNhbGxiYWNrKSA9PiB7XG4gIHZhciBwYXRoID0gZXhwb3J0cy5kYXRhRGlyICsgJy8nICsgaWQgKyAnLnR4dCc7XG4gIGZzLmFjY2VzcyhwYXRoLCAoZXJyKSA9PiB7XG4gICAgaWYgKGVycikge1xuICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZnMud3JpdGVGaWxlKHBhdGgsIHRleHQsIChlcnIpID0+IHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIGNhbGxiYWNrKG5ldyBFcnJvcihgTm8gaXRlbSB3aXRoIGlkOiAke2lkfWApKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYWxsYmFjayhudWxsLCB7aWQsIHRleHR9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbn07XG5cbmV4cG9ydHMuZGVsZXRlID0gKGlkLCBjYWxsYmFjaykgPT4ge1xuICB2YXIgcGF0aCA9IGV4cG9ydHMuZGF0YURpciArICcvJyArIGlkICsgJy50eHQnO1xuICBmcy51bmxpbmsocGF0aCwgKGVycikgPT4gY2FsbGJhY2soZXJyKSk7XG59O1xuXG4vLyBDb25maWcrSW5pdGlhbGl6YXRpb24gY29kZSAtLSBETyBOT1QgTU9ESUZZIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5leHBvcnRzLmRhdGFEaXIgPSBwYXRoLmpvaW4oX19kaXJuYW1lLCAnZGF0YScpO1xuXG5leHBvcnRzLmluaXRpYWxpemUgPSAoKSA9PiB7XG4gIGlmICghZnMuZXhpc3RzU3luYyhleHBvcnRzLmRhdGFEaXIpKSB7XG4gICAgZnMubWtkaXJTeW5jKGV4cG9ydHMuZGF0YURpcik7XG4gIH1cbn07XG4iXX0=